package com.thitracnghiem.app.service;

import com.thitracnghiem.app.config.SessionManager;
import com.thitracnghiem.app.exception.ErrorCode;
import com.thitracnghiem.app.exception.SuccessCode;
import com.thitracnghiem.app.model.GIAOVIEN;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.jdbc.core.RowMapper;
import org.springframework.stereotype.Service;

import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

@Service
public class GiaoVienService {

    @Autowired
    private SessionManager sessionManager;

    private RowMapper<GIAOVIEN> giaoVienRowMapper = new RowMapper<GIAOVIEN>() {
        @Override
        public GIAOVIEN mapRow(ResultSet rs, int rowNum) throws SQLException {
            GIAOVIEN gv = new GIAOVIEN();
            gv.setMAGV(rs.getString("MAGV") != null ? rs.getString("MAGV").trim() : null);
            gv.setHO(rs.getString("HO") != null ? rs.getString("HO").trim() : null);
            gv.setTEN(rs.getString("TEN") != null ? rs.getString("TEN").trim() : null);
            gv.setSODTLL(rs.getString("SODTLL") != null ? rs.getString("SODTLL").trim() : null);
            gv.setDIACHI(rs.getString("DIACHI") != null ? rs.getString("DIACHI").trim() : null);
            return gv;
        }
    };

    /**
     * L·∫•y danh s√°ch t·∫•t c·∫£ gi√°o vi√™n
     */
    public List<GIAOVIEN> getAllGiaoVien() {
        JdbcTemplate jdbcTemplate = sessionManager.getJdbcTemplate();
        String sql = "SELECT MAGV, HO, TEN, SODTLL, DIACHI FROM GIAOVIEN ORDER BY MAGV";
        return jdbcTemplate.query(sql, giaoVienRowMapper);
    }

    /**
     * L·∫•y th√¥ng tin gi√°o vi√™n theo m√£
     */
    public GIAOVIEN getGiaoVienById(String maGV) {
        JdbcTemplate jdbcTemplate = sessionManager.getJdbcTemplate();
        String sql = "SELECT MAGV, HO, TEN, SODTLL, DIACHI FROM GIAOVIEN WHERE MAGV = ?";
        try {
            return jdbcTemplate.queryForObject(sql, giaoVienRowMapper, maGV);
        } catch (Exception e) {
            return null;
        }
    }

    /**
     * Th√™m gi√°o vi√™n m·ªõi (ch·ªâ t·∫°o record trong b·∫£ng GIAOVIEN)
     * T√†i kho·∫£n SQL Server s·∫Ω ƒë∆∞·ª£c t·∫°o ri√™ng th√¥ng qua module Qu·∫£n l√Ω t√†i kho·∫£n
     */
    public boolean addGiaoVien(GIAOVIEN giaoVien) {
        try {
            // Validation: Ki·ªÉm tra MAGV format v√† ƒë·ªô d√†i
            String magv = giaoVien.getMAGV();
            if (magv == null || magv.trim().isEmpty()) {
                throw new RuntimeException("M√£ gi√°o vi√™n kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng");
            }
            
            // Trim v√† uppercase MAGV
            magv = magv.trim().toUpperCase();
            giaoVien.setMAGV(magv);
            
            // Ki·ªÉm tra ƒë·ªô d√†i (ph·∫£i ƒë√∫ng 8 k√Ω t·ª± cho NCHAR(8))
            if (magv.length() != 8) {
                throw new RuntimeException("M√£ gi√°o vi√™n ph·∫£i c√≥ ƒë√∫ng 8 k√Ω t·ª±");
            }
            
            // Ki·ªÉm tra format: 2 ch·ªØ c√°i + 6 ch·ªØ s·ªë (ƒë√∫ng 8 k√Ω t·ª±)
            if (!magv.matches("^[A-Z]{2}[0-9]{6}$")) {
                throw new RuntimeException("M√£ gi√°o vi√™n ph·∫£i c√≥ format: 2 ch·ªØ c√°i + 6 ch·ªØ s·ªë (VD: GV000001)");
            }
            
            // Ki·ªÉm tra kh√¥ng c√≥ kho·∫£ng tr·∫Øng
            if (magv.contains(" ")) {
                throw new RuntimeException("M√£ gi√°o vi√™n kh√¥ng ƒë∆∞·ª£c ch·ª©a kho·∫£ng tr·∫Øng");
            }
            
            JdbcTemplate jdbcTemplate = sessionManager.getJdbcTemplate();
            
            // Backup tr∆∞·ªõc khi thay ƒë·ªïi
            createBackup("ADD_GIAOVIEN", giaoVien.getMAGV());
            
            // Th√™m v√†o b·∫£ng GIAOVIEN
            String sql = "INSERT INTO GIAOVIEN (MAGV, HO, TEN, SODTLL, DIACHI) VALUES (?, ?, ?, ?, ?)";
            
            int result = jdbcTemplate.update(sql,
                giaoVien.getMAGV(),
                giaoVien.getHO(),
                giaoVien.getTEN(),
                giaoVien.getSODTLL(),
                giaoVien.getDIACHI()
            );
            
            if (result > 0) {
                System.out.println("‚úÖ Th√™m gi√°o vi√™n th√†nh c√¥ng: " + giaoVien.getMAGV() + 
                                 " - " + giaoVien.getHO() + " " + giaoVien.getTEN());
                System.out.println("‚ÑπÔ∏è L∆∞u √Ω: T√†i kho·∫£n SQL Server c·∫ßn ƒë∆∞·ª£c t·∫°o ri√™ng th√¥ng qua module 'Qu·∫£n l√Ω t√†i kho·∫£n'");
                return true;
            }
            
            return false;
        } catch (Exception e) {
            System.err.println("‚ùå L·ªói th√™m gi√°o vi√™n: " + e.getMessage());
            throw new RuntimeException(e.getMessage());
        }
    }

    /**
     * C·∫≠p nh·∫≠t th√¥ng tin gi√°o vi√™n (kh√¥ng thay ƒë·ªïi SQL login)
     */
    public boolean updateGiaoVien(GIAOVIEN giaoVien) {
        try {
            JdbcTemplate jdbcTemplate = sessionManager.getJdbcTemplate();
            
            // Backup tr∆∞·ªõc khi thay ƒë·ªïi
            createBackup("UPDATE_GIAOVIEN", giaoVien.getMAGV());
            
            String sql = "UPDATE GIAOVIEN SET HO = ?, TEN = ?, SODTLL = ?, DIACHI = ? WHERE MAGV = ?";
            
            int result = jdbcTemplate.update(sql,
                giaoVien.getHO(),
                giaoVien.getTEN(),
                giaoVien.getSODTLL(),
                giaoVien.getDIACHI(),
                giaoVien.getMAGV()
            );
            
            return result > 0;
        } catch (Exception e) {
            System.err.println("L·ªói c·∫≠p nh·∫≠t gi√°o vi√™n: " + e.getMessage());
            return false;
        }
    }

    /**
     * X√≥a gi√°o vi√™n + X√≥a SQL login
     */
    public boolean deleteGiaoVien(String maGV) {
        try {
            JdbcTemplate jdbcTemplate = sessionManager.getJdbcTemplate();
            
            System.out.println("üîç Ki·ªÉm tra ƒëi·ªÅu ki·ªán x√≥a gi√°o vi√™n: " + maGV);
            
            // 1. KI·ªÇM TRA C√ÅC THAM CHI·∫æU TR∆Ø·ªöC KHI X√ìA (Business Logic)
            StringBuilder errorMessage = new StringBuilder();
            boolean hasReferences = false;
            
            // Ki·ªÉm tra GIAOVIEN_DANGKY
            try {
                String checkDangKy = "SELECT COUNT(*) FROM GIAOVIEN_DANGKY WHERE MAGV = ?";
                int dangKyCount = jdbcTemplate.queryForObject(checkDangKy, Integer.class, maGV);
                if (dangKyCount > 0) {
                    errorMessage.append("- ").append(dangKyCount).append(" ƒëƒÉng k√Ω thi\n");
                    hasReferences = true;
                }
            } catch (Exception e) {
                System.err.println("‚ö†Ô∏è Kh√¥ng th·ªÉ ki·ªÉm tra GIAOVIEN_DANGKY: " + e.getMessage());
            }
            
            // Ki·ªÉm tra BODE
            try {
                String checkBoDe = "SELECT COUNT(*) FROM BODE WHERE MAGV = ?";
                int bodeCount = jdbcTemplate.queryForObject(checkBoDe, Integer.class, maGV);
                if (bodeCount > 0) {
                    errorMessage.append("- ").append(bodeCount).append(" b·ªô ƒë·ªÅ thi\n");
                    hasReferences = true;
                }
            } catch (Exception e) {
                System.err.println("‚ö†Ô∏è Kh√¥ng th·ªÉ ki·ªÉm tra BODE: " + e.getMessage());
            }
            
            // Ki·ªÉm tra CAUHOI
            try {
                String checkCauHoi = "SELECT COUNT(*) FROM CAUHOI WHERE MAGV = ?";
                int cauhoiCount = jdbcTemplate.queryForObject(checkCauHoi, Integer.class, maGV);
                if (cauhoiCount > 0) {
                    errorMessage.append("- ").append(cauhoiCount).append(" c√¢u h·ªèi\n");
                    hasReferences = true;
                }
            } catch (Exception e) {
                System.err.println("‚ö†Ô∏è Kh√¥ng th·ªÉ ki·ªÉm tra CAUHOI: " + e.getMessage());
            }
            
            // 2. N·∫æU C√ì THAM CHI·∫æU ‚Üí T·ª™ CH·ªêI X√ìA (Business Rule)
            if (hasReferences) {
                String errorDetails = errorMessage.toString().trim();
                String fullErrorMessage = ErrorCode.createDeleteError(maGV, errorDetails);
                
                // Log chi ti·∫øt cho developer
                System.err.println(fullErrorMessage);
                
                // Throw exception v·ªõi message ƒë∆°n gi·∫£n cho user
                throw new RuntimeException(ErrorCode.USER_GV_CANNOT_DELETE);
            }
            
            // 3. N·∫æU KH√îNG C√ì THAM CHI·∫æU ‚Üí CHO PH√âP X√ìA
            System.out.println("‚úÖ Gi√°o vi√™n " + maGV + " kh√¥ng c√≥ d·ªØ li·ªáu li√™n quan, c√≥ th·ªÉ x√≥a an to√†n");
            
            // Backup tr∆∞·ªõc khi thay ƒë·ªïi
            createBackup("DELETE_GIAOVIEN", maGV);
            
            // X√≥a t·ª´ b·∫£ng GIAOVIEN
            String deleteGiaoVien = "DELETE FROM GIAOVIEN WHERE MAGV = ?";
            int result = jdbcTemplate.update(deleteGiaoVien, maGV);
            
            if (result > 0) {
                // X√≥a SQL Server login
                boolean loginDeleted = deleteSqlLogin(maGV);
                
                if (loginDeleted) {
                    System.out.println(SuccessCode.createSafeDeleteSuccess("gi√°o vi√™n", maGV));
                } else {
                    System.err.println(ErrorCode.createFullError(
                        ErrorCode.GV_DELETE_LOGIN_FAILED, 
                        ErrorCode.GV_DELETE_LOGIN_FAILED_MSG, 
                        "M√£ gi√°o vi√™n: " + maGV));
                }
                
                return true;
            } else {
                // Log chi ti·∫øt cho developer
                System.err.println(ErrorCode.createFullError(
                    ErrorCode.GV_NOT_FOUND, 
                    ErrorCode.GV_NOT_FOUND_MSG, 
                    "M√£ gi√°o vi√™n: " + maGV));
                
                // Throw user-friendly message
                throw new RuntimeException(ErrorCode.USER_GV_NOT_FOUND);
            }
            
        } catch (RuntimeException e) {
            // Re-throw RuntimeException ƒë√£ ƒë∆∞·ª£c format (business logic errors)
            throw e;
        } catch (Exception e) {
            // Log chi ti·∫øt cho developer (unexpected errors)
            String errorMessage = ErrorCode.createFullError(
                ErrorCode.GENERAL_ERROR, 
                ErrorCode.GENERAL_ERROR_MSG, 
                e.getMessage());
            System.err.println(errorMessage);
            
            // Re-throw user-friendly message
            throw new RuntimeException(ErrorCode.USER_GENERAL_ERROR);
        }
    }

    /**
     * T·∫°o SQL Server login cho gi√°o vi√™n
     */
    private boolean createSqlLogin(String username, String password) {
        try {
            JdbcTemplate jdbcTemplate = sessionManager.getJdbcTemplate();
            System.out.println("üîÑ B·∫Øt ƒë·∫ßu t·∫°o SQL login cho: " + username + " v·ªõi password: " + password);
            
            // Ki·ªÉm tra permissions tr∆∞·ªõc
            try {
                String currentUser = jdbcTemplate.queryForObject("SELECT SYSTEM_USER", String.class);
                System.out.println("üë§ Current user: " + currentUser);
                
                String currentDatabase = jdbcTemplate.queryForObject("SELECT DB_NAME()", String.class);
                System.out.println("üóÑÔ∏è Current database: " + currentDatabase);
                
                // Test c√≥ quy·ªÅn t·∫°o login kh√¥ng
                String hasPermission = jdbcTemplate.queryForObject(
                    "SELECT HAS_PERMS_BY_NAME(NULL, NULL, 'ALTER ANY LOGIN')", String.class);
                System.out.println("üîë Has CREATE LOGIN permission: " + hasPermission);
                
            } catch (Exception e) {
                System.err.println("‚ö†Ô∏è Kh√¥ng th·ªÉ ki·ªÉm tra permissions: " + e.getMessage());
            }
            
            // Ki·ªÉm tra login ƒë√£ t·ªìn t·∫°i ch∆∞a
            String checkSql = "SELECT COUNT(*) FROM sys.sql_logins WHERE name = ?";
            int count = jdbcTemplate.queryForObject(checkSql, Integer.class, username);
            
            if (count > 0) {
                System.out.println("‚ö†Ô∏è SQL login ƒë√£ t·ªìn t·∫°i: " + username);
                return true; // ƒê√£ t·ªìn t·∫°i th√¨ coi nh∆∞ th√†nh c√¥ng
            }
            
            // T·∫°o login m·ªõi - ƒë∆°n gi·∫£n h√≥a SQL
            String createLoginSql = "CREATE LOGIN [" + username + "] WITH PASSWORD = '" + password + "', " +
                                   "CHECK_EXPIRATION = OFF, " +
                                   "CHECK_POLICY = OFF";
            
            System.out.println("üîÑ Executing SQL: " + createLoginSql);
            jdbcTemplate.execute(createLoginSql);
            System.out.println("‚úÖ T·∫°o login th√†nh c√¥ng");
            
            // T·∫°o user trong database hi·ªán t·∫°i
            String createUserSql = "CREATE USER [" + username + "] FOR LOGIN [" + username + "]";
            System.out.println("üîÑ Executing SQL: " + createUserSql);
            jdbcTemplate.execute(createUserSql);
            System.out.println("‚úÖ T·∫°o user th√†nh c√¥ng");
            
            System.out.println("‚úÖ T·∫°o SQL login ho√†n t·∫•t: " + username);
            return true;
            
        } catch (Exception e) {
            System.err.println("‚ùå L·ªói t·∫°o SQL login cho " + username + ": " + e.getMessage());
            e.printStackTrace();
            return false;
        }
    }

    /**
     * G√°n TeacherRole cho user
     */
    private boolean assignTeacherRole(String username) {
        try {
            JdbcTemplate jdbcTemplate = sessionManager.getJdbcTemplate();
            System.out.println("üîÑ B·∫Øt ƒë·∫ßu g√°n quy·ªÅn gi√°o vi√™n cho: " + username);
            
            // Ki·ªÉm tra user ƒë√£ t·ªìn t·∫°i ch∆∞a
            String checkUserSql = "SELECT COUNT(*) FROM sys.database_principals WHERE name = ?";
            int userCount = jdbcTemplate.queryForObject(checkUserSql, Integer.class, username);
            
            if (userCount == 0) {
                System.err.println("‚ùå User " + username + " kh√¥ng t·ªìn t·∫°i trong database");
                return false;
            }
            
            // G√°n database roles thay v√¨ server role
            try {
                String assignDbRoleSql1 = "ALTER ROLE [db_datareader] ADD MEMBER [" + username + "]";
                jdbcTemplate.execute(assignDbRoleSql1);
                System.out.println("‚úÖ G√°n db_datareader th√†nh c√¥ng");
            } catch (Exception e) {
                System.err.println("‚ö†Ô∏è L·ªói g√°n db_datareader: " + e.getMessage());
            }
            
            try {
                String assignDbRoleSql2 = "ALTER ROLE [db_datawriter] ADD MEMBER [" + username + "]";
                jdbcTemplate.execute(assignDbRoleSql2);
                System.out.println("‚úÖ G√°n db_datawriter th√†nh c√¥ng");
            } catch (Exception e) {
                System.err.println("‚ö†Ô∏è L·ªói g√°n db_datawriter: " + e.getMessage());
            }
            
            // T·∫°o v√† g√°n database role TeacherRole (n·∫øu c·∫ßn)
            try {
                // T·∫°o role TeacherRole n·∫øu ch∆∞a c√≥
                String createRoleSql = "IF NOT EXISTS (SELECT * FROM sys.database_principals WHERE name = 'TeacherRole' AND type = 'R') " +
                                      "CREATE ROLE [TeacherRole]";
                jdbcTemplate.execute(createRoleSql);
                System.out.println("‚úÖ ƒê·∫£m b·∫£o role TeacherRole t·ªìn t·∫°i");
                
                // G√°n user v√†o TeacherRole
                String assignTeacherRoleSql = "ALTER ROLE [TeacherRole] ADD MEMBER [" + username + "]";
                jdbcTemplate.execute(assignTeacherRoleSql);
                System.out.println("‚úÖ G√°n TeacherRole (database role) th√†nh c√¥ng");
                
            } catch (Exception e) {
                System.err.println("‚ö†Ô∏è L·ªói g√°n TeacherRole: " + e.getMessage());
            }
            
            System.out.println("‚úÖ Ho√†n t·∫•t g√°n quy·ªÅn gi√°o vi√™n cho: " + username);
            return true;
            
        } catch (Exception e) {
            System.err.println("‚ùå L·ªói g√°n quy·ªÅn gi√°o vi√™n cho " + username + ": " + e.getMessage());
            e.printStackTrace();
            return false;
        }
    }

    /**
     * X√≥a SQL Server login
     */
    private boolean deleteSqlLogin(String username) {
        try {
            JdbcTemplate jdbcTemplate = sessionManager.getJdbcTemplate();
            
            // Ki·ªÉm tra login c√≥ t·ªìn t·∫°i kh√¥ng
            String checkSql = "SELECT COUNT(*) FROM sys.sql_logins WHERE name = ?";
            int count = jdbcTemplate.queryForObject(checkSql, Integer.class, username);
            
            if (count == 0) {
                System.out.println("‚ö†Ô∏è SQL login kh√¥ng t·ªìn t·∫°i: " + username);
                return true; // Kh√¥ng t·ªìn t·∫°i th√¨ coi nh∆∞ ƒë√£ x√≥a th√†nh c√¥ng
            }
            
            // X√≥a user kh·ªèi database tr∆∞·ªõc
            try {
                String dropUserSql = "DROP USER [" + username + "]";
                jdbcTemplate.execute(dropUserSql);
            } catch (Exception e) {
                System.err.println("‚ö†Ô∏è Kh√¥ng th·ªÉ x√≥a user (c√≥ th·ªÉ kh√¥ng t·ªìn t·∫°i): " + username);
            }
            
            // X√≥a login
            String dropLoginSql = "DROP LOGIN [" + username + "]";
            jdbcTemplate.execute(dropLoginSql);
            
            System.out.println("‚úÖ X√≥a SQL login th√†nh c√¥ng: " + username);
            return true;
            
        } catch (Exception e) {
            System.err.println("‚ùå L·ªói x√≥a SQL login cho " + username + ": " + e.getMessage());
            return false;
        }
    }

    /**
     * L·∫•y danh s√°ch khoa
     */
    public List<String> getAllKhoa() {
        JdbcTemplate jdbcTemplate = sessionManager.getJdbcTemplate();
        String sql = "SELECT MAKHOA FROM KHOA ORDER BY MAKHOA";
        return jdbcTemplate.queryForList(sql, String.class);
    }

    /**
     * T·∫°o backup ƒë∆°n gi·∫£n - ghi log thay ƒë·ªïi
     */
    private void createBackup(String action, String maGV) {
        try {
            JdbcTemplate jdbcTemplate = sessionManager.getJdbcTemplate();
            
            // T·∫°o b·∫£ng backup log n·∫øu ch∆∞a c√≥
            String createLogTable = "IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = 'BACKUP_LOG') " +
                                   "CREATE TABLE BACKUP_LOG (" +
                                   "ID INT IDENTITY(1,1) PRIMARY KEY, " +
                                   "ACTION_TYPE NVARCHAR(50), " +
                                   "TABLE_NAME NVARCHAR(50), " +
                                   "RECORD_ID NVARCHAR(50), " +
                                   "OLD_DATA NVARCHAR(MAX), " +
                                   "ACTION_TIME DATETIME DEFAULT GETDATE(), " +
                                   "USER_NAME NVARCHAR(50)" +
                                   ")";
            jdbcTemplate.execute(createLogTable);
            
            // L∆∞u d·ªØ li·ªáu c≈© (n·∫øu l√† UPDATE ho·∫∑c DELETE)
            String oldData = "";
            if ("UPDATE_GIAOVIEN".equals(action) || "DELETE_GIAOVIEN".equals(action)) {
                try {
                    String getOldData = "SELECT MAGV + '|' + HO + '|' + TEN + '|' + " +
                                       "ISNULL(SODTLL,'') + '|' + ISNULL(DIACHI,'') AS old_data " +
                                       "FROM GIAOVIEN WHERE MAGV = ?";
                    oldData = jdbcTemplate.queryForObject(getOldData, String.class, maGV);
                } catch (Exception e) {
                    oldData = "Kh√¥ng l·∫•y ƒë∆∞·ª£c d·ªØ li·ªáu c≈©";
                }
            }
            
            // Ghi log backup
            String insertLog = "INSERT INTO BACKUP_LOG (ACTION_TYPE, TABLE_NAME, RECORD_ID, OLD_DATA, USER_NAME) " +
                              "VALUES (?, 'GIAOVIEN', ?, ?, ?)";
            String currentUser = "ADMIN"; // T·∫°m th·ªùi hard-code
            try {
                currentUser = sessionManager.getCurrentUser().getUserId();
            } catch (Exception e) {
                // N·∫øu kh√¥ng l·∫•y ƒë∆∞·ª£c user hi·ªán t·∫°i th√¨ d√πng default
            }
            jdbcTemplate.update(insertLog, action, maGV, oldData, currentUser);
            
            System.out.println("‚úÖ Backup log created: " + action + " for " + maGV);
        } catch (Exception e) {
            System.err.println("‚ö†Ô∏è L·ªói t·∫°o backup: " + e.getMessage());
        }
    }

    /**
     * L·∫•y danh s√°ch gi√°o vi√™n ch∆∞a c√≥ SQL login
     */
    public List<GIAOVIEN> getGiaoVienChuaCoLogin() {
        try {
            JdbcTemplate jdbcTemplate = sessionManager.getJdbcTemplate();
            String sql = """
                SELECT gv.MAGV, gv.HO, gv.TEN, gv.SODTLL, gv.DIACHI 
                FROM GIAOVIEN gv 
                WHERE gv.MAGV NOT IN (
                    SELECT name FROM sys.sql_logins WHERE name = gv.MAGV
                )
                ORDER BY gv.MAGV
                """;
            
            return jdbcTemplate.query(sql, giaoVienRowMapper);
        } catch (Exception e) {
            System.err.println("L·ªói l·∫•y danh s√°ch gi√°o vi√™n ch∆∞a c√≥ login: " + e.getMessage());
            return new ArrayList<>();
        }
    }

    /**
     * T·∫°o SQL login cho gi√°o vi√™n v·ªõi password l√† s·ªë ƒëi·ªán tho·∫°i
     */
    public boolean taoSqlLoginVoiPasswordTest(String magv) {
        try {
            // Ki·ªÉm tra gi√°o vi√™n c√≥ t·ªìn t·∫°i kh√¥ng
            GIAOVIEN gv = getGiaoVienById(magv);
            if (gv == null) {
                System.err.println("‚ùå Gi√°o vi√™n kh√¥ng t·ªìn t·∫°i: " + magv);
                return false;
            }

            // L·∫•y s·ªë ƒëi·ªán tho·∫°i l√†m password
            String password = gv.getSODTLL();
            if (password == null || password.trim().isEmpty()) {
                System.err.println("‚ùå Gi√°o vi√™n " + magv + " kh√¥ng c√≥ s·ªë ƒëi·ªán tho·∫°i");
                return false;
            }
            
            // Lo·∫°i b·ªè kho·∫£ng tr·∫Øng v√† k√Ω t·ª± ƒë·∫∑c bi·ªát
            password = password.replaceAll("[^0-9]", "");
            if (password.length() < 6) {
                System.err.println("‚ùå S·ªë ƒëi·ªán tho·∫°i kh√¥ng h·ª£p l·ªá cho gi√°o vi√™n " + magv + ": " + password);
                return false;
            }

            // T·∫°o SQL login v·ªõi password l√† s·ªë ƒëi·ªán tho·∫°i
            boolean loginCreated = createSqlLogin(magv, password);
            
            if (loginCreated) {
                // G√°n TeacherRole
                boolean roleAssigned = assignTeacherRole(magv);
                
                if (roleAssigned) {
                    System.out.println("‚úÖ T·∫°o t√†i kho·∫£n th√†nh c√¥ng cho gi√°o vi√™n: " + magv + " v·ªõi password: " + password);
                    return true;
                } else {
                    System.err.println("‚ö†Ô∏è G√°n role th·∫•t b·∫°i cho gi√°o vi√™n: " + magv);
                    return true; // V·∫´n coi nh∆∞ th√†nh c√¥ng v√¨ ƒë√£ t·∫°o login
                }
            } else {
                System.err.println("‚ùå T·∫°o t√†i kho·∫£n th·∫•t b·∫°i cho: " + magv);
                return false;
            }
        } catch (Exception e) {
            System.err.println("L·ªói t·∫°o SQL login cho gi√°o vi√™n " + magv + ": " + e.getMessage());
            return false;
        }
    }
} 