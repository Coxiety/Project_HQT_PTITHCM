package com.thitracnghiem.app.service;

import com.thitracnghiem.app.config.SessionManager;
import com.thitracnghiem.app.exception.ErrorCode;
import com.thitracnghiem.app.model.SINHVIEN;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.jdbc.core.RowMapper;
import org.springframework.stereotype.Service;

import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

@Service
public class SinhVienService {

    @Autowired
    private SessionManager sessionManager;

    private RowMapper<SINHVIEN> sinhVienRowMapper = new RowMapper<SINHVIEN>() {
        @Override
        public SINHVIEN mapRow(ResultSet rs, int rowNum) throws SQLException {
            SINHVIEN sv = new SINHVIEN();
            sv.setMASV(rs.getString("MASV"));
            sv.setHO(rs.getString("HO"));
            sv.setTEN(rs.getString("TEN"));
            sv.setNGAYSINH(rs.getDate("NGAYSINH"));
            sv.setDIACHI(rs.getString("DIACHI"));
            sv.setMALOP(rs.getString("MALOP"));
            return sv;
        }
    };

    /**
     * L·∫•y danh s√°ch t·∫•t c·∫£ sinh vi√™n
     */
    public List<SINHVIEN> getAllSinhVien() {
        JdbcTemplate jdbcTemplate = sessionManager.getJdbcTemplate();
        String sql = "SELECT MASV, HO, TEN, NGAYSINH, DIACHI, MALOP FROM SINHVIEN ORDER BY MASV";
        return jdbcTemplate.query(sql, sinhVienRowMapper);
    }

    /**
     * L·∫•y th√¥ng tin sinh vi√™n theo m√£
     */
    public SINHVIEN getSinhVienById(String maSV) {
        JdbcTemplate jdbcTemplate = sessionManager.getJdbcTemplate();
        String sql = "SELECT MASV, HO, TEN, NGAYSINH, DIACHI, MALOP FROM SINHVIEN WHERE MASV = ?";
        try {
            return jdbcTemplate.queryForObject(sql, sinhVienRowMapper, maSV);
        } catch (Exception e) {
            return null;
        }
    }

    /**
     * L·∫•y danh s√°ch sinh vi√™n theo l·ªõp
     */
    public List<SINHVIEN> getAllSinhVienByLop(String maLop) {
        JdbcTemplate jdbcTemplate = sessionManager.getJdbcTemplate();
        String sql = "SELECT MASV, HO, TEN, NGAYSINH, DIACHI, MALOP FROM SINHVIEN WHERE MALOP = ? ORDER BY MASV";
        try {
            return jdbcTemplate.query(sql, sinhVienRowMapper, maLop);
        } catch (Exception e) {
            System.err.println("L·ªói l·∫•y danh s√°ch sinh vi√™n theo l·ªõp: " + e.getMessage());
            return new ArrayList<>();
        }
    }

    /**
     * T·∫°o m√£ sinh vi√™n t·ª± ƒë·ªông theo format: N[nƒÉm]L[l·ªõp][sinh vi√™n]
     * V√≠ d·ª•: nƒÉm 2022, l·ªõp L001, sinh vi√™n th·ª© 1 ‚Üí N22L0101
     * V√≠ d·ª•: nƒÉm 2022, l·ªõp L001, sinh vi√™n th·ª© 2 ‚Üí N22L0102
     * Format: N + 2 s·ªë nƒÉm + L + 2 s·ªë l·ªõp + 2 s·ªë sinh vi√™n = 8 k√Ω t·ª±
     */
    public String generateMaSinhVien(int namNhapHoc, String maLop) {
        JdbcTemplate jdbcTemplate = sessionManager.getJdbcTemplate();
        
        // L·∫•y 2 s·ªë cu·ªëi c·ªßa nƒÉm
        String namHocSuffix = String.format("%02d", namNhapHoc % 100);
        
        // Extract s·ªë t·ª´ m√£ l·ªõp (L001‚Üí01, LOP1‚Üí01, K01‚Üí01, CNTT‚Üí01 n·∫øu kh√¥ng c√≥ s·ªë)
        String lopNumber = maLop.replaceAll("\\D", ""); // L·∫•y t·∫•t c·∫£ s·ªë
        int lopCode;
        if (lopNumber.length() > 0) {
            lopCode = Integer.parseInt(lopNumber) % 100; // L·∫•y 2 s·ªë cu·ªëi, max 99
        } else {
            // N·∫øu kh√¥ng c√≥ s·ªë, hash t√™n l·ªõp th√†nh s·ªë 1-99
            lopCode = (Math.abs(maLop.hashCode()) % 99) + 1;
        }
        String lopSuffix = String.format("%02d", lopCode);
        
        // T·∫°o prefix cho l·ªõp n√†y: N + nƒÉm + L + s·ªë l·ªõp
        String prefix = "N" + namHocSuffix + "L" + lopSuffix;
        
        // ƒê·∫øm sinh vi√™n hi·ªán t·∫°i trong l·ªõp n√†y (c√πng prefix)
        String sql = "SELECT COUNT(*) FROM SINHVIEN WHERE MASV LIKE ?";
        String pattern = prefix + "%";
        
        int count = jdbcTemplate.queryForObject(sql, Integer.class, pattern);
        
        // T·∫°o s·ªë sequence sinh vi√™n (01-99)
        int sinhVienNumber = (count + 1) % 100; // Max 99 sinh vi√™n/l·ªõp
        if (sinhVienNumber == 0) sinhVienNumber = 99; // Avoid 00
        String sinhVienSuffix = String.format("%02d", sinhVienNumber);
        
        return prefix + sinhVienSuffix;
    }

    /**
     * Th√™m sinh vi√™n m·ªõi (ch·ªâ t·∫°o record trong b·∫£ng SINHVIEN)
     * T√†i kho·∫£n SQL Server s·∫Ω ƒë∆∞·ª£c t·∫°o ri√™ng th√¥ng qua module Qu·∫£n l√Ω t√†i kho·∫£n
     */
    public boolean addSinhVien(SINHVIEN sinhVien, int namNhapHoc) {
        try {
            JdbcTemplate jdbcTemplate = sessionManager.getJdbcTemplate();
            
            // T·ª± ƒë·ªông t·∫°o m√£ sinh vi√™n
            String maSinhVien = generateMaSinhVien(namNhapHoc, sinhVien.getMALOP());
            sinhVien.setMASV(maSinhVien);
            
            // Backup tr∆∞·ªõc khi thay ƒë·ªïi
            createBackup("ADD_SINHVIEN", sinhVien.getMASV());
            
            // Th√™m v√†o b·∫£ng SINHVIEN
            String sql = "INSERT INTO SINHVIEN (MASV, HO, TEN, NGAYSINH, DIACHI, MALOP) VALUES (?, ?, ?, ?, ?, ?)";
            
            int result = jdbcTemplate.update(sql,
                sinhVien.getMASV(),
                sinhVien.getHO(),
                sinhVien.getTEN(),
                sinhVien.getNGAYSINH(),
                sinhVien.getDIACHI(),
                sinhVien.getMALOP()
            );
            
            if (result > 0) {
                System.out.println("‚úÖ Th√™m sinh vi√™n th√†nh c√¥ng: " + sinhVien.getMASV() + 
                                 " - " + sinhVien.getHO() + " " + sinhVien.getTEN());
                System.out.println("‚ÑπÔ∏è L∆∞u √Ω: T√†i kho·∫£n SQL Server c·∫ßn ƒë∆∞·ª£c t·∫°o ri√™ng th√¥ng qua module 'Qu·∫£n l√Ω t√†i kho·∫£n'");
                return true;
            }
            
            return false;
        } catch (Exception e) {
            System.err.println("‚ùå L·ªói th√™m sinh vi√™n: " + e.getMessage());
            return false;
        }
    }

    /**
     * Th√™m sinh vi√™n m·ªõi (compatibility method - deprecated)
     * S·ª≠ d·ª•ng method addSinhVien(SINHVIEN, int) thay th·∫ø
     */
    @Deprecated
    public boolean addSinhVien(SINHVIEN sinhVien) {
        // N·∫øu kh√¥ng c√≥ nƒÉm nh·∫≠p h·ªçc, s·ª≠ d·ª•ng nƒÉm hi·ªán t·∫°i
        int currentYear = java.util.Calendar.getInstance().get(java.util.Calendar.YEAR);
        return addSinhVien(sinhVien, currentYear);
    }

    /**
     * C·∫≠p nh·∫≠t th√¥ng tin sinh vi√™n (kh√¥ng thay ƒë·ªïi SQL login)
     */
    public boolean updateSinhVien(SINHVIEN sinhVien) {
        try {
            JdbcTemplate jdbcTemplate = sessionManager.getJdbcTemplate();
            
            // Backup tr∆∞·ªõc khi thay ƒë·ªïi
            createBackup("UPDATE_SINHVIEN", sinhVien.getMASV());
            
            String sql = "UPDATE SINHVIEN SET HO = ?, TEN = ?, NGAYSINH = ?, DIACHI = ?, MALOP = ? WHERE MASV = ?";
            
            int result = jdbcTemplate.update(sql,
                sinhVien.getHO(),
                sinhVien.getTEN(),
                sinhVien.getNGAYSINH(),
                sinhVien.getDIACHI(),
                sinhVien.getMALOP(),
                sinhVien.getMASV()
            );
            
            return result > 0;
        } catch (Exception e) {
            System.err.println("L·ªói c·∫≠p nh·∫≠t sinh vi√™n: " + e.getMessage());
            return false;
        }
    }

    /**
     * X√≥a sinh vi√™n + X√≥a SQL login
     */
    public boolean deleteSinhVien(String maSV) {
        try {
            JdbcTemplate jdbcTemplate = sessionManager.getJdbcTemplate();
            
            System.out.println("üîç Ki·ªÉm tra ƒëi·ªÅu ki·ªán x√≥a sinh vi√™n: " + maSV);
            
            // 1. KI·ªÇM TRA C√ÅC THAM CHI·∫æU TR∆Ø·ªöC KHI X√ìA (Business Logic)
            StringBuilder errorMessage = new StringBuilder();
            boolean hasReferences = false;
            
            // Ki·ªÉm tra BANGDIEM
            try {
                String checkBangDiem = "SELECT COUNT(*) FROM BANGDIEM WHERE MASV = ?";
                int bangdiemCount = jdbcTemplate.queryForObject(checkBangDiem, Integer.class, maSV);
                if (bangdiemCount > 0) {
                    errorMessage.append("- ").append(bangdiemCount).append(" b·∫£ng ƒëi·ªÉm\n");
                    hasReferences = true;
                }
            } catch (Exception e) {
                System.err.println("‚ö†Ô∏è Kh√¥ng th·ªÉ ki·ªÉm tra BANGDIEM: " + e.getMessage());
            }
            
            // Ki·ªÉm tra KETQUA
            try {
                String checkKetQua = "SELECT COUNT(*) FROM KETQUA WHERE MASV = ?";
                int ketquaCount = jdbcTemplate.queryForObject(checkKetQua, Integer.class, maSV);
                if (ketquaCount > 0) {
                    errorMessage.append("- ").append(ketquaCount).append(" k·∫øt qu·∫£ thi\n");
                    hasReferences = true;
                }
            } catch (Exception e) {
                System.err.println("‚ö†Ô∏è Kh√¥ng th·ªÉ ki·ªÉm tra KETQUA: " + e.getMessage());
            }
            
            // 2. N·∫æU C√ì THAM CHI·∫æU ‚Üí T·ª™ CH·ªêI X√ìA (Business Rule)
            if (hasReferences) {
                String errorDetails = errorMessage.toString().trim();
                String fullErrorMessage = "Kh√¥ng th·ªÉ x√≥a sinh vi√™n " + maSV + " v√¨ c√≤n c√≥:\n" + errorDetails;
                
                // Log chi ti·∫øt cho developer
                System.err.println(fullErrorMessage);
                
                // Throw exception v·ªõi message ƒë∆°n gi·∫£n cho user
                throw new RuntimeException(ErrorCode.USER_SV_CANNOT_DELETE);
            }
            
            // 3. N·∫æU KH√îNG C√ì THAM CHI·∫æU ‚Üí CHO PH√âP X√ìA
            System.out.println("‚úÖ Sinh vi√™n " + maSV + " kh√¥ng c√≥ d·ªØ li·ªáu li√™n quan, c√≥ th·ªÉ x√≥a an to√†n");
            
            // Backup tr∆∞·ªõc khi thay ƒë·ªïi
            createBackup("DELETE_SINHVIEN", maSV);
            
            // X√≥a t·ª´ b·∫£ng SINHVIEN
            String deleteSinhVien = "DELETE FROM SINHVIEN WHERE MASV = ?";
            int result = jdbcTemplate.update(deleteSinhVien, maSV);
            
            if (result > 0) {
                // X√≥a SQL Server login
                boolean loginDeleted = deleteSqlLogin(maSV);
                
                if (loginDeleted) {
                    System.out.println("‚úÖ X√≥a sinh vi√™n " + maSV + " th√†nh c√¥ng (bao g·ªìm SQL login)");
                } else {
                    System.err.println("‚ö†Ô∏è " + ErrorCode.SV_DELETE_LOGIN_FAILED_MSG + " - M√£ sinh vi√™n: " + maSV);
                }
                
                return true;
            } else {
                // Log chi ti·∫øt cho developer
                System.err.println(ErrorCode.SV_NOT_FOUND_MSG + " - M√£ sinh vi√™n: " + maSV);
                
                // Throw user-friendly message
                throw new RuntimeException(ErrorCode.USER_SV_NOT_FOUND);
            }
            
        } catch (RuntimeException e) {
            // Re-throw RuntimeException ƒë√£ ƒë∆∞·ª£c format (business logic errors)
            throw e;
        } catch (Exception e) {
            // Log chi ti·∫øt cho developer (unexpected errors)
            String errorMessage = ErrorCode.GENERAL_ERROR_MSG + ": " + e.getMessage();
            System.err.println(errorMessage);
            
            // Re-throw user-friendly message
            throw new RuntimeException(ErrorCode.USER_GENERAL_ERROR);
        }
    }

    /**
     * T·∫°o SQL Server login cho sinh vi√™n
     */
    private boolean createSqlLogin(String username, String password) {
        try {
            JdbcTemplate jdbcTemplate = sessionManager.getJdbcTemplate();
            System.out.println("üîÑ B·∫Øt ƒë·∫ßu t·∫°o SQL login cho sinh vi√™n: " + username + " v·ªõi password: " + password);
            
            // Ki·ªÉm tra login ƒë√£ t·ªìn t·∫°i ch∆∞a
            String checkSql = "SELECT COUNT(*) FROM sys.sql_logins WHERE name = ?";
            int count = jdbcTemplate.queryForObject(checkSql, Integer.class, username);
            
            if (count > 0) {
                System.out.println("‚ö†Ô∏è SQL login ƒë√£ t·ªìn t·∫°i: " + username);
                return true; // ƒê√£ t·ªìn t·∫°i th√¨ coi nh∆∞ th√†nh c√¥ng
            }
            
            // T·∫°o login m·ªõi
            String createLoginSql = "CREATE LOGIN [" + username + "] WITH PASSWORD = '" + password + "', " +
                                   "CHECK_EXPIRATION = OFF, " +
                                   "CHECK_POLICY = OFF";
            
            jdbcTemplate.execute(createLoginSql);
            
            // T·∫°o user trong database
            String createUserSql = "CREATE USER [" + username + "] FOR LOGIN [" + username + "]";
            jdbcTemplate.execute(createUserSql);
            
            System.out.println("‚úÖ T·∫°o t√†i kho·∫£n th√†nh c√¥ng cho sinh vi√™n: " + username);
            return true;
        } catch (Exception e) {
            System.err.println("‚ùå L·ªói t·∫°o SQL login cho sinh vi√™n " + username + ": " + e.getMessage());
            return false;
        }
    }

    /**
     * G√°n StudentRole cho sinh vi√™n
     */
    private boolean assignStudentRole(String username) {
        try {
            JdbcTemplate jdbcTemplate = sessionManager.getJdbcTemplate();
            System.out.println("üîÑ G√°n StudentRole cho: " + username);
            
            // Ki·ªÉm tra role ƒë√£ t·ªìn t·∫°i ch∆∞a
            String checkRoleSql = "SELECT COUNT(*) FROM sys.database_principals WHERE name = 'StudentRole' AND type = 'R'";
            int roleCount = jdbcTemplate.queryForObject(checkRoleSql, Integer.class);
            
            if (roleCount == 0) {
                // T·∫°o StudentRole n·∫øu ch∆∞a c√≥
                String createRoleSql = "CREATE ROLE StudentRole";
                jdbcTemplate.execute(createRoleSql);
                
                // C·∫•p quy·ªÅn SELECT cho StudentRole
                String grantPermissions = """
                    GRANT SELECT ON MONHOC TO StudentRole;
                    GRANT SELECT ON BODE TO StudentRole;
                    GRANT SELECT ON CAUHOI TO StudentRole;
                    GRANT SELECT ON KETQUA TO StudentRole;
                    GRANT SELECT ON BANGDIEM TO StudentRole;
                    GRANT SELECT ON SINHVIEN TO StudentRole;
                    """;
                jdbcTemplate.execute(grantPermissions);
                
                System.out.println("‚úÖ T·∫°o StudentRole v√† c·∫•p quy·ªÅn th√†nh c√¥ng");
            }
            
            // Th√™m user v√†o role
            String addToRoleSql = "ALTER ROLE StudentRole ADD MEMBER [" + username + "]";
            jdbcTemplate.execute(addToRoleSql);
            
            System.out.println("‚úÖ G√°n StudentRole th√†nh c√¥ng cho: " + username);
            return true;
        } catch (Exception e) {
            System.err.println("‚ùå L·ªói g√°n StudentRole cho " + username + ": " + e.getMessage());
            return false;
        }
    }

    /**
     * X√≥a SQL Server login cho sinh vi√™n
     */
    private boolean deleteSqlLogin(String username) {
        try {
            JdbcTemplate jdbcTemplate = sessionManager.getJdbcTemplate();
            System.out.println("üîÑ X√≥a SQL login cho sinh vi√™n: " + username);
            
            // X√≥a user kh·ªèi database tr∆∞·ªõc
            try {
                String dropUserSql = "DROP USER IF EXISTS [" + username + "]";
                jdbcTemplate.execute(dropUserSql);
                System.out.println("‚úÖ X√≥a database user th√†nh c√¥ng: " + username);
            } catch (Exception e) {
                System.err.println("‚ö†Ô∏è L·ªói x√≥a database user " + username + ": " + e.getMessage());
            }
            
            // X√≥a login
            try {
                String dropLoginSql = "DROP LOGIN IF EXISTS [" + username + "]";
                jdbcTemplate.execute(dropLoginSql);
                System.out.println("‚úÖ X√≥a SQL login th√†nh c√¥ng: " + username);
                return true;
            } catch (Exception e) {
                System.err.println("‚ö†Ô∏è L·ªói x√≥a SQL login " + username + ": " + e.getMessage());
                return false;
            }
        } catch (Exception e) {
            System.err.println("‚ùå L·ªói t·ªïng th·ªÉ khi x√≥a login " + username + ": " + e.getMessage());
            return false;
        }
    }

    /**
     * L·∫•y danh s√°ch sinh vi√™n ch∆∞a c√≥ SQL login
     */
    public List<SINHVIEN> getSinhVienChuaCoLogin() {
        try {
            JdbcTemplate jdbcTemplate = sessionManager.getJdbcTemplate();
            String sql = """
                SELECT sv.MASV, sv.HO, sv.TEN, sv.MALOP, sv.NGAYSINH, sv.DIACHI 
                FROM SINHVIEN sv 
                WHERE sv.MASV NOT IN (
                    SELECT name FROM sys.sql_logins WHERE name = sv.MASV
                )
                ORDER BY sv.MASV
                """;
            
            return jdbcTemplate.query(sql, sinhVienRowMapper);
        } catch (Exception e) {
            System.err.println("L·ªói l·∫•y danh s√°ch sinh vi√™n ch∆∞a c√≥ login: " + e.getMessage());
            return new ArrayList<>();
        }
    }

    /**
     * T·∫°o SQL login cho sinh vi√™n v·ªõi password l√† ng√†y sinh (DDMMYY)
     */
    public boolean taoSqlLoginVoiPasswordTest(String masv) {
        try {
            // Ki·ªÉm tra sinh vi√™n c√≥ t·ªìn t·∫°i kh√¥ng
            SINHVIEN sv = getSinhVienById(masv);
            if (sv == null) {
                System.err.println("‚ùå Sinh vi√™n kh√¥ng t·ªìn t·∫°i: " + masv);
                return false;
            }

            // T·∫°o password t·ª´ ng√†y sinh (DDMMYY)
            String password = convertNgaySinhToPassword(sv.getNGAYSINH());
            if (password == null || password.length() != 6) {
                System.err.println("‚ùå Kh√¥ng th·ªÉ t·∫°o password t·ª´ ng√†y sinh cho sinh vi√™n " + masv);
                return false;
            }

            // T·∫°o SQL login v·ªõi password l√† ng√†y sinh
            boolean loginCreated = createSqlLogin(masv, password);
            
            if (loginCreated) {
                // G√°n StudentRole
                boolean roleAssigned = assignStudentRole(masv);
                
                if (roleAssigned) {
                    System.out.println("‚úÖ T·∫°o t√†i kho·∫£n th√†nh c√¥ng cho sinh vi√™n: " + masv + " v·ªõi password: " + password);
                    return true;
                } else {
                    System.err.println("‚ö†Ô∏è G√°n role th·∫•t b·∫°i cho sinh vi√™n: " + masv);
                    return true; // V·∫´n coi nh∆∞ th√†nh c√¥ng v√¨ ƒë√£ t·∫°o login
                }
            } else {
                System.err.println("‚ùå T·∫°o t√†i kho·∫£n th·∫•t b·∫°i cho: " + masv);
                return false;
            }
        } catch (Exception e) {
            System.err.println("L·ªói t·∫°o SQL login cho sinh vi√™n " + masv + ": " + e.getMessage());
            return false;
        }
    }

    /**
     * Chuy·ªÉn ƒë·ªïi ng√†y sinh th√†nh password (DDMMYY)
     * V√≠ d·ª•: 11/03/2001 -> 110301
     */
    private String convertNgaySinhToPassword(java.util.Date ngaySinh) {
        try {
            if (ngaySinh == null) {
                return null;
            }
            
            // Chuy·ªÉn java.util.Date th√†nh LocalDate
            java.time.LocalDate localDate = ngaySinh.toInstant()
                .atZone(java.time.ZoneId.systemDefault())
                .toLocalDate();
                
            int day = localDate.getDayOfMonth();
            int month = localDate.getMonthValue();
            int year = localDate.getYear() % 100; // L·∫•y 2 ch·ªØ s·ªë cu·ªëi c·ªßa nƒÉm
            
            return String.format("%02d%02d%02d", day, month, year);
        } catch (Exception e) {
            System.err.println("L·ªói chuy·ªÉn ƒë·ªïi ng√†y sinh: " + e.getMessage());
            return null;
        }
    }

    /**
     * T·∫°o backup tr∆∞·ªõc khi thay ƒë·ªïi d·ªØ li·ªáu
     */
    private void createBackup(String operation, String entityId) {
        try {
            System.out.println("üì¶ T·∫°o backup cho " + operation + " - " + entityId);
            // C√≥ th·ªÉ implement logic backup ·ªü ƒë√¢y n·∫øu c·∫ßn
        } catch (Exception e) {
            System.err.println("‚ö†Ô∏è L·ªói t·∫°o backup: " + e.getMessage());
        }
    }
} 